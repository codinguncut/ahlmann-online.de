<html><head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Monika Beck."></meta><meta name="keywords" content="Hot Potatoes, Half-Baked Software, Windows, University of Victoria"></meta><title>Abbreviations:  Put in the abbreviations for the expressions given below.</title><script language="javascript" type="text/javascript">//<![CDATA[<!--// BrowserCheck Objectfunction BrowserCheck() {	var b = navigator.appName//HBS extension	this.mac = (navigator.appVersion.indexOf('Mac') != -1)	if (b=="Netscape") this.b = "ns"	else if (b=="Microsoft Internet Explorer") this.b = "ie"	else this.b = b	this.version = navigator.appVersion	this.v = parseInt(this.version)	this.ns = (this.b=="ns" && this.v>=4)	this.ns4 = (this.b=="ns" && this.v==4)	this.ns5 = (this.b=="ns" && this.v==5)	this.ie = (this.b=="ie" && this.v>=4)	this.ie4 = (this.version.indexOf('MSIE 4')>0)	this.ie5 = (this.version.indexOf('MSIE 5')>0)	this.min = (this.ns||this.ie)	this.CRAPBrowser = (this.ie && this.mac); //Cannot Resolve Addresses Properly}is = new BrowserCheck();var LocFolder = GetFolder(window.location.href);function GetFolder(LocPath){	var i = LocPath.lastIndexOf('/');	if (i<0){i=LocPath.lastIndexOf('\\')};	return LocPath.substring(0,i);}function CombineURLs(InURL){	var i = InURL.indexOf('../');	var s = LocFolder;	while (i >- 1){		s = GetFolder(s);		InURL = InURL.substring(3,InURL.length);		i = InURL.indexOf('../');	}	return s + '/' + InURL;}x = new Array();function ResolveURLs(InText,Attribute){	x.length=0;	var Temp = InText.toLowerCase();	var z;	var AttLen = Attribute.length + 2;	var y=Temp.lastIndexOf(Attribute + '="');	while (y>-1){		var sLoc = y+AttLen;		if (Temp.substring(sLoc,sLoc+5) != 'http:'){			x[x.length]=new Array();			x[x.length-1][0] = sLoc;			z = Temp.indexOf('"',sLoc);			x[x.length-1][1] = z;			x[x.length-1][2] = Temp.substring(sLoc,z);		}		Temp = Temp.substring(0,y);		y=Temp.lastIndexOf(Attribute + '="');	}	for (var j=x.length-1; j>-1; j--){		InText = InText.substring(0,x[j][0]) + CombineURLs(x[j][2]) + InText.substring(x[j][1], InText.length);	}	return InText;}function ResolveAllURLs(Stuff){	Stuff = ResolveURLs(Stuff,'href');	Stuff = ResolveURLs(Stuff,'src');	return Stuff;}var ExBGColor = '#999900'; //'#DDDDDD';var PageBGColor = '#ffffff'; //'#FFFFFF';var NavBarColor = '#999900'; //'#000000';var TextColor = '#Cccccc';var CurrQNum = 0;var YourScoreIs = 'Your score is '; //'Your score is: ';var Tries = 0;var CorrectChoices = 0;var ContinuousScoring = true; //true;var CorrectFirstTime = 'Questions answered correctly first time: '; //'Questions answered correctly at first try: ';var ExerciseTitle = 'Abbreviations:  Put in the abbreviations for the expressions given below.'; //var ExerciseSubtitle = 'Short-answer quiz'; //var Instructions = 'Type your answer, then press "Check". If you need help, you can click on the "Hint" button to get a free letter.'; //'';var ShuffleQs = false; //true;var CorrectResponse = 'Correct!';var TheseAnswersToo = 'Other correct answers: ';var ThisMuchIsCorrect = 'This part of your answer is correct: ';var TheseWordsAppear = 'These words appear in the answer: ';var IncorrectResponse = 'Sorry! Try again.';var EnterGuess = 'Please enter a guess.';var GiveHint = 'Next correct letter in the answer: ';var TheseCorrect = 'Correct answers: ';var CaseSensitive = false;var QsToShow = 10; //number of questions from the set to be used each timevar ShowOneByOne = true;var ReadingURL = '';var FocusBoxes = true;var Score = '';var FinalScore = '';var PreviousPage = history.length;var NavBar='';var TitleCode = '<tr><td align="center" valign="middle" bgcolor="#ffffff">';TitleCode += '<font size="+1" face="Verdana,Geneva,Arial" color="#111111">' + ExerciseTitle + '</font><br />';TitleCode += '<font size="-1" face="Verdana,Geneva,Arial" color="#111111">' + ExerciseSubtitle + '<br />';TitleCode += '</font></td></tr>';var QButtonsOpener = '<table border="0" width="85%" cellpadding="10">';QButtonsOpener += '<tr><td align="center" valign="middle"><form action="abbrev.htm">';QButtonsOpener += '<font size="+1"><input type="button" value="&lt;=" onclick="parent.ChangeQ(-1)"></input>';var QButtonsCloser = '<input type="button" value="=&gt;" onclick="parent.ChangeQ(1)"></input>';QButtonsCloser += '</font></form></td></tr></table>';var TableOpener = '<table border="0" width="85%">';var QRow = '<form name="QForm[QNum]" action="abbrev.htm" onSubmit="parent.TrapReturn(false,[QNum]); return false;">';QRow += '<tr><td valign="top" bgcolor="#999900" align="right" width="15%">';QRow += '<font size="+1" face="Verdana,Geneva,Arial" color="#Cccccc">[QNumber]&nbsp;&nbsp;&nbsp;</font></td>';QRow += '<td valign="top" bgcolor="#999900"><font size="-1" face="Verdana,Geneva,Arial" color="#Cccccc">[Question]<br />&nbsp;';QRow += '</font></td></tr>';var ARow = '<tr><td colspan="2" valign="top" align="center" bgcolor="#999900">';ARow += '<font face="Verdana,Geneva,Arial" color="#Cccccc">[AnswerBox]</font></td></tr></form>';var BtnRow = '<form name="Buttons" action="abbrev.htm"><tr><td colspan="2" valign="top" align="center" bgcolor="#999900">';BtnRow += '<input type="button" name="Check" onclick="parent.CheckAnswer(false,[QNum])" value="Check"></input>';BtnRow += '<input type="button" name="Hint" onclick="parent.CheckAnswer(true,[QNum])" value="Hint"></input>';BtnRow += '<input type="button" name="Show" onclick="parent.ShowAnswers([QNum])" value="Show answer"></input>';BtnRow += '</td></tr></form>';TableCloser = '</table>';var LongAnswer = '<textarea name="Guess" cols="20" rows="3" wrap="virtual"></textarea>';var ShortAnswer = '<input type="text" name="Guess" size="[AnswerSize]"></input>';function GoBack(){	var BackSkip = history.length - PreviousPage;	if (BackSkip > 0){		history.go((BackSkip+1)*-1);	}	else{		parent.history.back();	}}function TrapReturn(ShowHint,QNum){//if not yet answered correctly, call CheckAnswer	if (Status[QNum][0] < 1){		CheckAnswer(ShowHint,QNum);		return;	}//otherwise, move on to the next question if showing serially	else{		if (ShowOneByOne == true){			setTimeout('ChangeQ(1)', 50);		}	}}	function ReduceItems(){	var ItemToDump=0;	var j=0;	while (I.length > QsToShow){		ItemToDump = Math.floor(I.length*Math.random());		for (j=ItemToDump; j<(I.length-1); j++){			I[j] = I[j+1];		}		I.length = I.length-1;	}}function Shuffle(InArray){	Temp = new Array();	var Len = InArray.length;	var j = Len;	for (var i=0; i<Len; i++){		Temp[i] = InArray[i];	}	for (i=0; i<Len; i++){		Num = Math.floor(j  *  Math.random());		InArray[i] = Temp[Num];		for (var k=Num; k < j; k++) {			Temp[k] = Temp[k+1];		}		j--;	}	return InArray;}function WriteFeedback(Feedback) {	if (is.CRAPBrowser){Feedback=ResolveAllURLs(Feedback);}	Feedback = Webble(Feedback);//Build the output string	var OutString = '';	OutString += '<html>';	OutString += '<body  background="abbrev.htm" bgcolor="#ffffff" text="#Cccccc" link="#Ffffff" vlink="#cc0000">';	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';	OutString += NavBar;	if (Feedback.length>0){		OutString += '<tr><td bgcolor="#999900" align="center">'; 		OutString += '<font face="Verdana,Geneva,Arial" size="-1" color="#Cccccc">';		OutString += Feedback;		OutString += '</font></td></tr>'	}	OutString += '</table></center></body></html>';//Write it to the frame	TopFrame.document.clear();	TopFrame.document.open();	TopFrame.document.write(OutString);	TopFrame.document.close();}function StartUp(){//Write the top frame	WriteFeedback(Instructions);	if ((is.mac)&&(is.ns)) {		FocusBoxes = false;	}//Reduce array if required	if (QsToShow < I.length){		ReduceItems();	}//Shuffle stuff if required	if (ShuffleQs == true){		I = Shuffle(I);	}//Create arrays	CreateStatusArrays();//Show the first question or all of them	if (ShowOneByOne == false){		ShowAllQs();	}	else{		ShowQuestion(CurrQNum);	}//Focus the first box	var Box = eval('BottomFrame.document.QForm0.Guess');	if (Box != null){		Box.focus();	}}I = new Array();I[0] = new Array();I[0][0]='for example';I[0][1] = new Array();I[0][1][0] = new Array();I[0][1][0][0]='e.g.';I[1] = new Array();I[1][0]='please reply';I[1][1] = new Array();I[1][1][0] = new Array();I[1][1][0][0]='r.s.v.p.';I[1][1][1] = new Array();I[1][1][1][0]='rsvp';I[1][1][2] = new Array();I[1][1][2][0]='R.S.V.P.';I[1][1][3] = new Array();I[1][1][3][0]='RSVP';I[2] = new Array();I[2][0]='that is to say';I[2][1] = new Array();I[2][1][0] = new Array();I[2][1][0][0]='i.e.';I[3] = new Array();I[3][0]='please note';I[3][1] = new Array();I[3][1][0] = new Array();I[3][1][0][0]='NB';I[3][1][1] = new Array();I[3][1][1][0]='nb';I[4] = new Array();I[4][0]='and so on';I[4][1] = new Array();I[4][1][0] = new Array();I[4][1][0][0]='etc.';I[4][1][1] = new Array();I[4][1][1][0]='etc';I[5] = new Array();I[5][0]='as soon as possible';I[5][1] = new Array();I[5][1][0] = new Array();I[5][1][0][0]='asap';I[5][1][1] = new Array();I[5][1][1][0]='a.s.a.p.';I[6] = new Array();I[6][0]='enclosed';I[6][1] = new Array();I[6][1][0] = new Array();I[6][1][0][0]='enc.';I[7] = new Array();I[7][0]='television';I[7][1] = new Array();I[7][1][0] = new Array();I[7][1][0][0]='TV';I[7][1][1] = new Array();I[7][1][1][0]='telly';I[8] = new Array();I[8][0]='Bachelor of Science';I[8][1] = new Array();I[8][1][0] = new Array();I[8][1][0][0]='BSc';I[9] = new Array();I[9][0]='Flying saucer';I[9][1] = new Array();I[9][1][0] = new Array();I[9][1][0][0]='UFO';Status = new Array();function CreateStatusArrays(){	Status.length = 0;	for (i=0; i<I.length; i++){		Status[i] = new Array();		Status[i][0] = 0; // question done or not		Status[i][1] = 0; // wrong checks		Status[i][2] = 0; // hints asked for		Status[i][3] = ''; // student's answer		Status[i][4] = 0; // score for this question	}}function ReplaceStuff(Token, Replacement, InString){	var i = InString.indexOf(Token);	var FirstBit = '';	var LastBit = '';	while (i>-1){		FirstBit = InString.substring(0, i);		LastBit = InString.substring(i + Token.length, InString.length);			InString = FirstBit + Replacement + LastBit;		i = InString.indexOf(Token);	}	return InString;}function ChangeQ(ChangeBy){	var NewNum = CurrQNum + ChangeBy;	if ((NewNum >= 0)&&(NewNum<I.length)){		CurrQNum = NewNum;		ShowQuestion(CurrQNum);	}}function BuildQuestion(QNum){	var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);//Measure the answers and find out what kind of//box to show	var Longest = 5;	for (var i=0; i<I[QNum][1].length; i++){		if (I[QNum][1][i][0].length > Longest){			Longest = I[QNum][1][i][0].length;		}	}	var AnsBox = '';	if (Longest > 20){		AnsBox = LongAnswer;		}	else{		AnsBox = ReplaceStuff('[AnswerSize]', (Longest + ''), ShortAnswer);	}	var AnsRow = ReplaceStuff('[AnswerBox]', AnsBox, ARow);	Temp += AnsRow;	Temp += BtnRow;	Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);	Temp = ReplaceStuff('[QNum]', QNum, Temp);	return Temp;}function DisplayExercise(StuffToDisplay){//Build the output string	var OutString = '';	OutString += '<html>';	OutString += '<body background="abbrev.htm" bgcolor="#ffffff" text="#Cccccc" link="#Ffffff" vlink="#cc0000">';	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';	OutString += TitleCode; 	OutString += '<tr><td bgcolor="#999900" align="center">'; 	OutString += '<font face="Verdana,Geneva,Arial" size="-1">';	OutString += StuffToDisplay;	OutString += '</font></td></tr>';	OutString += NavBar;	OutString += '</table></center></body></html>';	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}//Write it to the frame	BottomFrame.document.clear();	BottomFrame.document.open();	BottomFrame.document.write(OutString);	BottomFrame.document.close();}function ShowAllQs(){	var Output = '';	for (var i=0; i<I.length-1; i++){		Output = Output + BuildQuestion(i);		Output = Output + '<tr><TD colspan="2"><hr></hr></td></tr>';	}	Output = Output + BuildQuestion(I.length-1);	Output = TableOpener + Output + TableCloser;	DisplayExercise(Output);}function ShowQuestion(QNum){//First, create the Q number readout at the top	var Readout = (QNum+1) + '/' + I.length;	while (Readout.length < 7){		Readout = ' ' + Readout + ' ';	}	Readout = QButtonsOpener + Readout + QButtonsCloser;	var Output = BuildQuestion(QNum);	Output = TableOpener + Output + TableCloser;	DisplayExercise(Readout + Output);//Replace the student's answer		var Box = eval('BottomFrame.document.QForm' + QNum + '.Guess');	if (Box != null){		if (Status[QNum][3].length > 0){			Box.value = Status[QNum][3];		}		Box.focus();	}}var LowerString='abcdefghijklmnopqrstuvwxyz%9A%9C%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9%EA%EB%EC%ED%EE%EF%F0%F1%F2%F3%F4%F5%F6%F8%F9%FA%FB%FC%FD%FE%FF';var UpperString='ABCDEFGHIJKLMNOPQRSTUVWXYZ%8A%8C%C0%C1%C2%C3%C4%C5%C6%C7%C8%C9%CA%CB%CC%CD%CE%CF%D0%D1%D2%D3%D4%D5%D6%D8%D9%DA%DB%DC%DD%DE%9F';LowerString = unescape(LowerString);UpperString = unescape(UpperString);function ConvertCase(InString, Direction){	var FromString = '';	var ToString = '';	if (Direction == 0){		FromString = UpperString;		ToString = LowerString;	}	else{		FromString = LowerString;		ToString = UpperString;	}	var i = 0;	j = 0;	var OutString = '';	for (i=0; i<InString.length; i++){		if (FromString.indexOf(InString.charAt(i)) > -1){			j = FromString.indexOf(InString.charAt(i));						OutString += ToString.charAt(j);		}		else{				OutString += InString.charAt(i);		}	}	return OutString;}function TrimString(InString){        var x = 0        if (InString.length != 0) {                while ((escape(InString.charAt(InString.length - 1)) == '%20') || (escape(InString.charAt(InString.length - 1)) == '%0A') || (escape(InString.charAt(InString.length - 1)) == '%0D')){                        InString = InString.substring(0, InString.length - 1)                }                while ((escape(InString.charAt(0)) == '%20') || (escape(InString.charAt(0)) == '%0A') || (escape(InString.charAt(0)) == '%0D')){                        InString = InString.substring(1, InString.length)                }                while (InString.indexOf('  ') != -1) {                        x = InString.indexOf('  ')                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length )                 }                return InString        }        else {                return ''        }}function RemovePunctuation(InString){var OutString = '';        for (i=0; i<InString.length; i++){                if ((InString.charAt(i) == '.') || (InString.charAt(i) == ',') ||(InString.charAt(i) == ';') || (InString.charAt(i) == ':') || (InString.charAt(i) == '!') || (InString.charAt(i) == '?') || (InString.charAt(i) == '"')){}                else {                        OutString += InString.charAt(i);                }        }        return OutString;}function CheckBeginning(Guess, Answer){var OutString = '';var i = 0;        while (Guess.charAt(i) == Answer.charAt(i)) {                OutString += Guess.charAt(i);                i++;        }        return OutString;}function CheckEnd(Guess, Answer){var i=0;var j=0;var OutString='';        i = Guess.length;        j = Answer.length;        while (Guess.charAt(i) == Answer.charAt(j)){                OutString = Guess.charAt(i) + OutString;                i--;                j--;        }        return OutString;}function FindLongest(InArray){	if (InArray.length < 1){return -1;}	var Longest = 0;	for (var i=1; i<InArray.length; i++){		if (InArray[i].length > InArray[Longest].length){			Longest = i;		}	}	return Longest;}function CheckWords(Guess, Answer){        var Start = 0;        var End = 0;        var LoopCounter = 0;        var ReturnList = '';        var i = 0;        var j = 0;        GuessWords = new Array();        AnswerWords = new Array();        Guess = RemovePunctuation(Guess);        Answer = RemovePunctuation(Answer);        while (Guess.indexOf(' ', Start) > -1) {                End = Guess.indexOf(' ', Start);                GuessWords[LoopCounter] = ConvertCase(Guess.substring(Start, End), 0);                LoopCounter++;                Start = End + 1;        }        GuessWords[LoopCounter] = ConvertCase(Guess.substring(Start, Guess.length), 0);        Start = 0;        LoopCounter = 0;        while (Answer.indexOf(' ', Start) > -1) {                End = Answer.indexOf(' ', Start);                AnswerWords[LoopCounter] = Answer.substring(Start, End);                LoopCounter++;                Start = End + 1;        }        AnswerWords[LoopCounter] = Answer.substring(Start, Answer.length);        ReturnList = '';        for (i = 0; i < GuessWords.length; i++){                for (j = 0; j < AnswerWords.length; j++){                        if (GuessWords[i] == ConvertCase(AnswerWords[j], 0)){                                ReturnList = ReturnList + AnswerWords[j] + ', ' ;                                AnswerWords[j] = '';                                break;                        }                }        }        if (ReturnList.length > 0){                ReturnList = ReturnList.substring(0, ReturnList.length - 2);        }        return ReturnList;}function CalculateScore(){	Score = 0;	var DoneQs = 0;	for (i=0; i<Status.length; i++){		if (Status[i][0] == 1){			Score += Status[i][4];			DoneQs++;		}	}	Score = Math.floor((Score*100)/(DoneQs*10));	return Score;}function CheckAnswer(ShowHint, QNum){//if the question's already correct, exit gracefully	if (Status[QNum][0] == 1){		ShowAnswers(QNum);		return;	}	var Output = '';//Get the guess, trim it, and translate it if necessary	var Guess = TrimString(eval('BottomFrame.document.QForm' + QNum + '.Guess').value);//Save the guess	Status[QNum][3] = Guess;	if ((is.mac)&&(is.ns4)){		Guess = unescape(MacStringToWin(Guess));	}	var RealGuess = Guess;	if (CaseSensitive == false){		Guess = ConvertCase(Guess, 1);	}	if (Guess.length < 1){		WriteFeedback(EnterGuess);		return;	}//Get the correct answers and put them into an array	CorrectAs = new Array();	RealAs = new Array();	for (var i=0; i<I[QNum][1].length; i++){		CorrectAs[i] = unescape(I[QNum][1][i][0]);		RealAs[i] = CorrectAs[i];		if (CaseSensitive == false){			CorrectAs[i] = ConvertCase(CorrectAs[i], 1);		}	}//Check each answer to see whether it's correct -- if so, set Status variables and exit	var Right = -1;	var OtherAnswers = '';	for (i=0; i<CorrectAs.length; i++){		if (Guess==CorrectAs[i]){Right = i;}else{OtherAnswers+=RealAs[i] + '<br />';};	}	if (Right > -1){		Status[QNum][0] = 1;		Output = CorrectResponse + ' ';		if (OtherAnswers.length > 0){			Output += TheseAnswersToo + '<br />' + OtherAnswers;		}//Get the score for this question		var HintPenalty = (Status[QNum][2]*10)/CorrectAs[Right].length;		Status[QNum][4]  = Math.floor((10 - Status[QNum][1]) - HintPenalty);//Check whether the quiz is finished		var Finished = true;		for (var i=0; i<Status.length; i++){			if (Status[i][0] == 0){Finished = false;}		}//Calculate scores		if ((Finished==true)||(ContinuousScoring==true)){			var Score = CalculateScore();						Output = Output + YourScoreIs + ' ' + Score + '%. ';		}		if (Finished == true){			var CFT = 0;			for (i=0; i<Status.length; i++){				if ((Status[i][1] == 0)&&(Status[i][2] == 0)){				CFT++;				}			}		Output += CorrectFirstTime + CFT + '/' + I.length;		WriteFeedback(Output);		}		else{			WriteFeedback(Output);//Jump to the next question text box if there is one			if (QNum < I.length-1){				if ((FocusBoxes==true)&&(ShowOneByOne == false)){					eval('BottomFrame.document.QForm' + (QNum+1) + '.Guess').focus();				}			}		}	}//else the answer wasn't right	else {//increment the tries or hint variable for that question		if (ShowHint == false){Status[QNum][1]++;}else{Status[QNum][2]++;}//Find which answer is closest		CorrectBits = new Array();		CorrectBits[0] = new Array(); //Beginning bits		CorrectBits[1] = new Array(); //End bits		CorrectBits[2] = new Array(); //Combined bits		CorrectBits[3] = new Array(); //Hint (in case needed)		for (i=0; i<CorrectAs.length; i++){			CorrectBits[0][i] = CheckBeginning(Guess, CorrectAs[i]);			if (CorrectBits[0][i].length > 0){				CorrectBits[0][i] = RealAs[i].substring(0,CorrectBits[0][i].length);			}			CorrectBits[1][i] = CheckEnd(Guess, CorrectAs[i]);			if (CorrectBits[1][i].length > 0){				CorrectBits[1][i] = RealAs[i].substring(RealAs[i].length-CorrectBits[1][i].length,RealAs[i].length);			}			CorrectBits[2][i] = CorrectBits[0][i] + ' ... ' + CorrectBits[1][i];			CorrectBits[3][i] = CorrectBits[0][i] + RealAs[i].charAt(CorrectBits[0][i].length);			if (CorrectBits[3][i].charAt(CorrectBits[3][i].length-1) == ' '){				CorrectBits[3][i] += RealAs[i].charAt(CorrectBits[3][i].length);			}			CorrectBits[3][i] += '...'		}		var LongestCorrect = FindLongest(CorrectBits[2]);		if (CorrectBits[2][LongestCorrect].length > 5){			Output = ThisMuchIsCorrect + '<br />' + CorrectBits[2][LongestCorrect];		}		else{			if (ShowHint == false){				Output = IncorrectResponse;			}		}//Include words found in the answer		var FoundWords = CheckWords(Guess, CorrectAs[LongestCorrect])		if (FoundWords.length > 0){			Output += '<br />' + TheseWordsAppear + FoundWords;		}		if (ShowHint == true){			Output += '<br />' + GiveHint + CorrectBits[3][LongestCorrect];		}		WriteFeedback(Output);//Put the focus back in the box		if (FocusBoxes==true){			eval('BottomFrame.document.QForm' + (QNum) + '.Guess').focus();		}	}}CharList = new Array();EscapeList = new Array();function Webble(InString){	var OutString = '';	var NextChar = '';	var FoundCode = '';	var j = 0;	var i = 0;	for (i=0; i<InString.length; i++){		FoundCode = '';		NextChar = InString.charAt(i);		for (j=0; j<CharList.length; j++){			if (NextChar == CharList[j]){				FoundCode = EscapeList[j];				break;			}		}		if (FoundCode.length > 0){			OutString += FoundCode;		}		else{			OutString += NextChar;		}	}	return OutString;}var MacChars = '%80%81%82%83%84%85%86%87%88%89%8A%8B%8C%8D%8E%8F%90%91%92%93%94%95%96%97%98%99%9A';MacChars += '%9B%9C%9D%9E%9F%A0%A1%A4%A5%A6%A7%A8%AA%AB%AC%AE%AF%B4%B6%BB%BC%BE%BF%C0%C1%C2%C4%C7%C8';MacChars += '%C9%CA%CB%CC%CD%CE%CF%D0%D1%D2%D3%D4%D5%D6%D8%D9%DA%DB%DC%DD%E0%E1%E2%E3%E4%E5%E6%E7%E8%E9';MacChars += '%EA%EB%EC%ED%EE%EF%F1%F2%F3%F4%F5%F6%F7%F8%FB%FD';var WinChars = '%C4%C5%C7%C9%D1%D6%DC%E1%E0%E2%E4%E3%E5%E7%E9%E8%EA%EB%ED%EC%EE%EF%F1%F3%F2%F4';WinChars += '%F6%F5%FA%F9%FB%FC%86%BA%A7%95%B6%DF%AE%99%92%A8%C6%D8%A5%F0%AA%BA%E6%F8%BF%A1%AC%83%AB%BB';WinChars += '%85%82%C0%C3%D5%8C%9C%96%97%93%94%91%92%F7%FFY/%A4%8B%9B%87%B7%82%84%89%C2%CA%C1%CB';WinChars += '%C8%CD%CE%CF%CC%D3%D4%D2%DA%DB%D9%B9%88%98%AF%B0%94';WinChars = unescape(WinChars);MacChars = unescape(MacChars)function MacStringToWin(InString){	var OutString = '';	for (i=0; i<InString.length; i++){		if ( (InString.charAt(i) > '~') && (MacChars.indexOf(InString.charAt(i)) > -1) ){			OutString += WinChars.charAt(MacChars.indexOf(InString.charAt(i)));		}		else {			OutString += InString.charAt(i);		}	}	return escape(OutString);}function WinStringToMac(InString){	var OutString = '';	for (i=0; i<InString.length; i++){		if ( (InString.charAt(i) > '~') && (WinChars.indexOf(InString.charAt(i)) > -1) ){			OutString += MacChars.charAt(WinChars.indexOf(InString.charAt(i)));		}		else {			OutString += InString.charAt(i);		}	}	return escape(OutString);}function ShowAnswers(QNum){//If the question isn't done, mark it as done. Score will be 0;	Status[QNum][0] = 1;	Status[QNum][1] = -1;	Status[QNum][2] = -1;//Get the correct answers and put them into a string	var Output = TheseCorrect + '<br />';	for (var i=0; i<I[QNum][1].length; i++){		Output += unescape(I[QNum][1][i][0]) + '<br />';	}//Add the current score	Output += YourScoreIs + CalculateScore() + '%. ';	WriteFeedback(Output);	return true;}function Blank(){	return '<html><body>&copy;Half-Baked Software. Loading...</body></html>';}//-->//]]></script></head><!--<body>Fool those dumb ad-inserting ISPs</body>--><!--For full XHTML 1.0 compatibility, remove the border and framespacing attributes.These are required for proper display in current browsers, but render the document incompatible. Then, you'll need to add the appropriate Document Type Declaration; usethe W3C XHTML 1 frameset DTD.--><frameset rows="30%,*" framespacing="0" border="0" onload="StartUp()">	<frame src="javascript:parent.Blank()" frameborder="0" name="TopFrame"></frame>	<frame src="javascript:parent.Blank()" frameborder="0" name="BottomFrame"></frame></frameset></html>