<HTML><HEAD><meta name="author" content="Created with Quandary by Half-Baked Software, registered to Gormless Gumby."></meta><meta name="keywords" content="Hot Potatoes, Half-Baked Software, Windows, University of Victoria"></meta><TITLE>[Ein Kapitel neue Rechtschreibung]</TITLE><SCRIPT LANGUAGE="JavaScript">var CurrNode = 0;var UsePercentageFilters = false;var OKButton = '<FORM><FONT FACE="Comic Sans MS,Arial"><INPUT TYPE="BUTTON" VALUE="OK" onClick="parent.CodeFrame.ShowCurrNode()"></FONT></FORM>';var TableOpen = '<CENTER><TABLE BORDER="0" CELLPADDING="10" CELLSPACING="0" WIDTH="80%" BGCOLOR="#8080C0">';var TableClose = '</TABLE></CENTER>';var BoxOpen = '<TABLE BORDER="1" CELLPADDING="10" CELLSPACING="0"><TR><TD VALIGN="TOP"><FONT FACE="Comic Sans MS,Arial">';var BoxClose = '</FONT></TD></TR></TABLE>';var RowOpen = '<TR><TD><FONT FACE="Comic Sans MS,Arial">';var RowClose = '</FONT></TD></TR>';var strYouHave = 'You have: ';var strYouNeed = 'You need: ';var AlwaysShowAssets = true;var AlwaysShowLinks = true;var StartNode = -1; //used to jump into the middle of a maze on startupvar TransactionRefusalMessage = '';NodeSequence = new Array();NodeSequence[0] = 0;A = new Array();A[0] = ''A[1]='';A[2] = new Array();F = new Array();N = new Array();N[0] = new Array();N[0][0]='[Das mit dem &szlig;]';N[0][1]='Wie war das mit dem "scharfen &szlig;"? ';N[0][2] = new Array();N[0][2][0] = new Array();N[0][2][0][0] = 1;N[0][2][0][1]='Der Buchstabe ist komplett abgeschafft. ';N[0][2][0][2] = new Array;N[0][2][0][3] = new Array;N[0][2][1] = new Array();N[0][2][1][0] = 2;N[0][2][1][1]='Irgendwie schreibt man jetzt &ouml;fter "ss", wo fr&uuml;her "&szlig;" stand';N[0][2][1][2] = new Array;N[0][2][1][3] = new Array;N[1] = new Array();N[1][0]='Der Buchstabe ist komplett abgeschafft. ';N[1][1]='Nein, den Buchstaben gibt es weiterhin. Man wollte den feinen phonetischen Unterschied zwischen eine';N[1][1]+='r weisen und einer wei&szlig;en alten Dame erhalten, zwischen reisen und rei&szlig;en. <br /><br />In &szlig;&uuml;ddeutsch';N[1][1]+='land allerdings wirklich &uuml;berfl&uuml;ssig - bei uns &szlig;itzt &szlig;u&szlig;anne auf der Wie&szlig;e in der &szlig;onne.';N[1][2] = new Array();N[2] = new Array();N[2][0]='Irgendwie schreibt man jetzt &ouml;fter "ss", wo fr&uuml;her "&szlig;" stand';N[2][1]='<IMG SRC="rsr.gif" ALT="rsr.gif" WIDTH="441" HEIGHT="184" ALIGN="LEFT" BORDER="0">';N[2][2] = new Array();N[2][2][0] = new Array();N[2][2][0][0] = 3;N[2][2][0][1]='Nach einem  kurzen Vokal - wie in Kuss, Stress, Genuss - steht jetzt Doppel-s statt "&szlig;"';N[2][2][0][2] = new Array;N[2][2][0][3] = new Array;N[2][2][1] = new Array();N[2][2][1][0] = 4;N[2][2][1][1]='Blanke Willk&uuml;r';N[2][2][1][2] = new Array;N[2][2][1][3] = new Array;N[3] = new Array();N[3][0]='Nach einem kurzen Vokal - wie in Kuss, Stress, Genuss - steht jetzt Doppel-s statt "&szlig;"';N[3][1]='Genau. <br /><br />Dies erh&auml;lt die phonetische Regel: langer Vokal ->einfacher Konsonant<br />';N[3][2] = new Array();N[3][2][0] = new Array();N[3][2][0][0] = 5;N[3][2][0][1]='H&auml;? Bitte Beispiele zu dieser Regel';N[3][2][0][2] = new Array;N[3][2][0][3] = new Array;N[3][2][1] = new Array();N[3][2][1][0] = 6;N[3][2][1][1]='Ok, habs kapiert, weiter';N[3][2][1][2] = new Array;N[3][2][1][3] = new Array;N[4] = new Array();N[4][0]='Blanke Willk&uuml;r';N[4][1]='Neinein - schauen Sie sich die Grafik nochmal an!';N[4][2] = new Array();N[5] = new Array();N[5][0]='H&auml;? Bitte Beispiele zu dieser Regel';N[5][1]='Langer Vokal -> nur ein Konsonant folgt<br />Raten, Miete, f&uuml;hlen, Krise, Stra&szlig;e, Fu&szlig;, Grie&szlig;<br /><b';N[5][1]+='r />Kurzer Vokal -> Dopppelkonsonant folgt<br />Ratten, Mitte, f&uuml;llen, Risse, Klasse, Fluss, Beschis';N[5][1]+='s';N[5][2] = new Array();N[6] = new Array();N[6][0]='Ok, habs kapiert, weiter';N[6][1]='Hier kommen ein paar Testfragen.<br />Haben Sie\'s wirklich kapiert?';N[6][2] = new Array();N[6][2][0] = new Array();N[6][2][0][0] = 2;N[6][2][0][1]='Ich m&ouml;cht lieber die Grafik nochmal sehen';N[6][2][0][2] = new Array;N[6][2][0][3] = new Array;N[6][2][1] = new Array();N[6][2][1][0] = 8;N[6][2][1][1]='Zum Test';N[6][2][1][2] = new Array;N[6][2][1][3] = new Array;N[7] = new Array();N[7][0]='Ich m&ouml;cht lieber die Grafik nochmal sehen';N[7][1]='';N[7][2] = new Array();N[7][2][0] = new Array();N[7][2][0][0] = 2;N[7][2][0][1]='Irgendwie schreibt man jetzt &ouml;fter "ss", wo fr&uuml;her "&szlig;" stand';N[7][2][0][2] = new Array;N[7][2][0][3] = new Array;N[8] = new Array();N[8][0]='Zum Test';N[8][1]='Sie sitzen im Goldenen Posthorn und haben Hunger. <br />Was ist in der Suppe?';N[8][2] = new Array();N[8][2][0] = new Array();N[8][2][0][0] = 9;N[8][2][0][1]='Blo&szlig; ein bi&szlig;chen Gries';N[8][2][0][2] = new Array;N[8][2][0][3] = new Array;N[8][2][1] = new Array();N[8][2][1][0] = 10;N[8][2][1][1]='Blo&szlig; ein bisschen Grie&szlig;';N[8][2][1][2] = new Array;N[8][2][1][3] = new Array;N[8][2][2] = new Array();N[8][2][2][0] = 11;N[8][2][2][1]='Bloss ein bischen Gries';N[8][2][2][2] = new Array;N[8][2][2][3] = new Array;N[9] = new Array();N[9][0]='Blo&szlig; ein bi&szlig;chen Gries';N[9][1]='';N[9][2] = new Array();N[10] = new Array();N[10][0]='Blo&szlig; ein bisschen Grie&szlig;';N[10][1]='';N[10][2] = new Array();N[11] = new Array();N[11][0]='Bloss ein bischen Gries';N[11][1]='';N[11][2] = new Array();function StartUp(){//Check whether percentage filters are needed	for (var i=0; i<N.length; i++){		for (var j=0; j<N[i][2].length; j++){			for (var k=0; k<N[i][2][j][2].length; k++){				if (N[i][2][j][2][k][2] > 1){					UsePercentageFilters = true;					break;				}			}		}	}	if (UsePercentageFilters == true){		for (i=0; i<F[2].length; i++){			F[2][i][3] = 0;		}	}		if (StartNode > -1){		NodeSequence[NodeSequence.length] = StartNode;		ShowCurrNode();	}}function EnterMaze(){	NodeSequence.length = 1;	NodeSequence[0] = 0;//Reset current quantities of assets to initial quantities		for (var i=0; i<A[2].length; i++){		A[2][i][2] = A[2][i][1];	}	if (F[2] != null){		if (F[2].length > 0){			ShowFilters();				}		else{			ShowCurrNode();		}	}	else{		ShowCurrNode();	}}function ShowFilters(){	var BType = 'RADIO';	if (F[0]==false){		BType = 'CHECKBOX';	}	var FTable = TableOpen + RowOpen;	FTable += '<FORM NAME="Filters">';	FTable += F[1] + '<BR><BR>';	for (var i=0; i<F[2].length; i++){		FTable += '<INPUT TYPE="';		FTable += BType;		FTable += '" onClick="parent.CodeFrame.SetFilter(' + i + ')"';		FTable += ' NAME="FT"';		if (F[2][i][2] == true){			FTable += ' CHECKED '		}		FTable += '>';		FTable += F[2][i][0];		if (UsePercentageFilters == true){			FTable += ' <INPUT TYPE="EDIT" NAME="Percent';			FTable += i;			FTable += '" SIZE="3" MAXLENGTH="3" VALUE="';			FTable += F[2][i][3];			FTable += '">%';		}		FTable += '<BR>';	}		FTable += '<BR><CENTER><INPUT TYPE="BUTTON" NAME="FiltersChosen" ';	FTable += 'onClick="parent.CodeFrame.FiltersSelected()" VALUE="OK"></CENTER>';		FTable += '</FORM>' + RowClose + TableClose;	WriteOutput(FTable);}function FiltersSelected(){	var Done = false;	for (var i=0; i<F[2].length; i++){		if (UsePercentageFilters == true){			var p = eval('parent.ActionFrame.document.Filters.Percent' + i);			var Temp = p.value;			if ((Temp<1)||(Temp>100)){Temp=100;}			F[2][i][3] = Temp;		}		if (F[2][i][2] == true){			Done = true;		}		else{			F[2][i][3] = 0;		}	}	if (Done == true){		ShowNode(NodeSequence[NodeSequence.length-1]);	}}function BuildNode(NNum){	var LinkOpenA = '<INPUT TYPE="button" VALUE="=&gt;" onclick="parent.CodeFrame.JumpTo(';	var LinkOpenB = ')"></TD><TD><FONT FACE="Comic Sans MS,Arial">';	var LinkClose = '';//Open first table and add the title of this node	var NTable = TableOpen + '<TR><TD COLSPAN="2" ALIGN="CENTER"><FONT FACE="Comic Sans MS,Arial"><H3>';	NTable += N[NNum][0] + '</H3></FONT></TD></TR>';//Open the next row and start the subtable to contain the node contents and links	NTable += '<TR><TD><FORM><TABLE BORDER="0" CELLPADDING="5" WIDTH="100%">';//Add the first row of this subtable, containing the node contents	NTable += '<TR><TD COLSPAN="2"><FONT FACE="Comic Sans MS,Arial">' + N[NNum][1] + RowClose;	var TotLinks = 0;//If there are links, add subsequent rows to contain them	if (N[NNum][2].length > 0){		for (var i=0; i< N[NNum][2].length; i++){//if the link should be shown, then show it			var Show = true;			var AssetBlock = PassesAssets(NNum,i);			var FilterBlock = (PassesFilters(NNum,i) > -1);			if ((AssetBlock > 0)||(FilterBlock==true)){				Show = false;			}			if (AlwaysShowLinks==true){				Show = true;			}			if (AssetBlock == 2){				if (TransactionRefusalMessage == ''){					Show = false;				}			}			if (Show == true){				NTable += '<TR><TD ALIGN="RIGHT"><FONT FACE="Comic Sans MS,Arial">';				NTable += LinkOpenA;				NTable += N[NNum][2][i][0] + ',' + NNum + ',' + i;				NTable += LinkOpenB;				NTable += N[NNum][2][i][1];				NTable += LinkClose;				NTable += RowClose;				TotLinks++;			}		}	}//Close the subtable, and the cell containing it, then start another cell	NTable += '</TABLE></FORM></TD><TD>';//If there are any assets...	var CurrAssets = YouHave();	if ((CurrAssets.length > 0)&&((AlwaysShowAssets==true)||(TotLinks==0))){//...add a box subtable containing those assets		NTable += BoxOpen + CurrAssets + BoxClose;	}	else{		NTable += '&nbsp;';	}//Close the cell and row containing the box subtable, then close the main table	NTable += '</TD></TR>' + TableClose;	return NTable;}function YouHave(){	var Output = '';	for (var i=0; i<A[2].length; i++){		if ((A[2][i][2] != 0)&&(A[2][i][3]==false)){			Output += A[2][i][2] + ' ' + A[2][i][0] + '<BR CLEAR="ALL">';		}	}	if (Output.length > 0){		Output = strYouHave + '<BR><BR>' + Output;	}	return Output;}function PassesFilters(NNum, LNum){//Checks to see whether the user can use a particular link//based on the filters (if any) selected. Returns the number of//the first exclusion which prevents the user from accessing the link.//If there's no relevant exclude, returns -1;	var ENum = -1;	if ((F[2] != null)&&(F[2].length > 0)){//If there are excludes		for (var i=0; i<N[NNum][2][LNum][2].length; i++){//Check each ExcludeID against each selected filter			for (var j=0; j<F[2].length; j++){//Has the user selected that filter?				if (F[2][j][2] == true){//If they have, does the ExcludeID match the filter?					if (N[NNum][2][LNum][2][i][0] == j){//If so, do we need to worry about percentages?						if (UsePercentageFilters == true){//If so, is the threshold superceded?							if (N[NNum][2][LNum][2][i][2] <= F[2][j][3]){								ENum = i;								return ENum;							}						}//Otherwise, there is a match						else{							ENum = i;							return ENum;						}					}				}			}		}	}	return ENum;}function PassesAssets(NNum, LNum){//Checks to see whether the user can use a particular link//based on the assets (if any) held, and requirements for the link.//Returns true if the user can access the link, and false //if either a requirement or an asset change makes the jump impossible.//alert('Entered PassesAssets()');	var CanAffordIt = -1;	TransactionRefusalMessage = '';//Test to see if the user has enough assets to satisfy any requirements on this link	if ((A[2] != null)&&(A[2].length > 0)){		var TNum = -1;		var Requirement = 0;		var ReqType = 0;		var AssetID = -1;		var HiddenAsset = false;//If there are transactions		for (var i=0; i<N[NNum][2][LNum][3].length; i++){//alert('Entered transaction loop');			AssetID = N[NNum][2][LNum][3][i][0];			HiddenAsset = A[2][AssetID][3];//alert(HiddenAsset);			Requirement = N[NNum][2][LNum][3][i][2];			ReqType = N[NNum][2][LNum][3][i][3];			if (ReqType > 0){				if (ReqType == 1){					if ((A[2][AssetID][2]-0) <= (Requirement-0)){						if (HiddenAsset==true){							TransactionRefusalMessage = N[NNum][2][LNum][3][i][4];							return 2;						}						CanAffordIt = i;					}				}				if (ReqType == 2){					if ((A[2][AssetID][2]-0) >= (Requirement-0)){						if (HiddenAsset==true){							TransactionRefusalMessage = N[NNum][2][LNum][3][i][4];							return 2;						}						CanAffordIt = i;					}				}				if (ReqType == 3){					if ((A[2][AssetID][2]-0) != (Requirement-0)){						if (HiddenAsset==true){							TransactionRefusalMessage = N[NNum][2][LNum][3][i][4];							return 2;						}						CanAffordIt = i;					}				}			}		}	}//alert('CanAffordIt=' + CanAffordIt);	if (CanAffordIt >- 1){		TransactionRefusalMessage = N[NNum][2][LNum][3][CanAffordIt][4];		return 1;	}	else{		return 0;	}}function JumpTo(TargetNode, SourceNode, LNum){	var ENum = PassesFilters(SourceNode, LNum);//If this user is excluded, then	if(ENum > -1){//Get the first relevant refusal message		var RefMessage = N[SourceNode][2][LNum][2][ENum][1];				//If it's empty, get the default refusal message for that filter		if (RefMessage.length < 1){			RefMessage = F[2][N[SourceNode][2][LNum][2][ENum][0]][1];		}//Show the exclude message		RefMessage = TableOpen + RowOpen + '<CENTER>' + RefMessage + '<BR><BR>' + OKButton + '</CENTER>' + RowClose + TableClose;		WriteOutput(RefMessage);//Exit		return true;	}//Now test to see if the user has enough assets to handle any requirements on this link	if (PassesAssets(SourceNode, LNum) > 0){//If there's no refusal message to show, show the default "You have... You need..." stuff		if (TransactionRefusalMessage == ''){			YouNeed(SourceNode, LNum);		}//Otherwise show the refusal message		else{		RefMessage = TableOpen + RowOpen + '<CENTER>' + TransactionRefusalMessage + '<BR><BR>' + OKButton + '</CENTER>' + RowClose + TableClose;		WriteOutput(RefMessage);		}//Exit		return true;	}//If enough assets held, then do transactions	for (var i=0; i<N[SourceNode][2][LNum][3].length; i++){		AssetID = N[SourceNode][2][LNum][3][i][0];		ChangeBy = N[SourceNode][2][LNum][3][i][1];		A[2][AssetID][2] = (A[2][AssetID][2]-0) + (ChangeBy-0);	}	//Otherwise, allow the jump	NodeSequence[NodeSequence.length] = TargetNode;	ShowCurrNode();	return true;}function ShowNode(NNum){	if (NNum != NodeSequence[NodeSequence.length-1]){		NodeSequence[NodeSequence.length] = NNum;	}	WriteOutput(BuildNode(NNum));}function ShowCurrNode(){	if (NodeSequence.length > 0){		ShowNode(NodeSequence[NodeSequence.length-1]);	}	else{		ShowNode(0);	}}function SetFilter(FNum){	if (F[0] == false){		F[2][FNum][2] = !(F[2][FNum][2]);	}	else{		for (var i=0; i<F[2].length; i++){			F[2][i][2] = false;		}		F[2][FNum][2] = true;	}	if (UsePercentageFilters == true){		var p = eval('parent.ActionFrame.document.Filters.Percent' + FNum);		var Temp = p.value;		if ((Temp<1)||(Temp>100)){Temp=100;}		F[2][FNum][3] = Temp;		p.value = Temp;	}}function WriteOutput(Output) {	var FirstBit  = '<HTML><BODY BACKGROUND="rsr1c.htm" BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000CC">';//	FirstBit += '<FORM><INPUT TYPE="Hidden" NAME="ThisAvoidsNavigator3Bug"></FORM>';	FirstBit += '<FONT FACE="Comic Sans MS,Arial" SIZE="2">';	var LastBit = '</FONT></BODY></HTML>';	Output = FirstBit + Output + LastBit;	var d = parent.ActionFrame.document;	d.clear();	d.open();	d.write(Output);	d.close();}function UndoJump(){	if (NodeSequence.length < 1){		return;	}	NodeSequence.length = NodeSequence.length-1;	ShowCurrNode();}function YouNeed(NNum, LNum){	var AssetID = 0;	var AssetName = '';	var Output = '';	var HiddenAsset = false;	for (var i=0; i<N[NNum][2][LNum][3].length; i++){		if (N[NNum][2][LNum][3][i][3] > 0){			AssetID = N[NNum][2][LNum][3][i][0];			AssetName = A[2][AssetID][0];			HiddenAsset = A[2][AssetID][3];			if (HiddenAsset == false){				if (N[NNum][2][LNum][3][i][3]==1){					Output = Output + (N[NNum][2][LNum][3][i][2] + 1) + ' ' + AssetName + '<BR>';				}				if (N[NNum][2][LNum][3][i][3]==2){					Output = Output + (N[NNum][2][LNum][3][i][2] -1) + ' ' + AssetName + '<BR>';				}				if (N[NNum][2][LNum][3][i][3]==3){					Output = Output + N[NNum][2][LNum][3][i][2] + ' ' + AssetName + '<BR>';				}			}		}	}	if (Output.length > 0){		Output = strYouNeed + '<BR><BR>' + Output;	}	var Possessions = YouHave();	if (Possessions.length > 0){		Output = TableOpen + '<TR><TD VALIGN="TOP" ALIGN="RIGHT" WIDTH="50%">' + BoxOpen + Output + BoxClose + '</TD>';		Output += '<TD VALIGN="TOP" ALIGN="LEFT">' + BoxOpen + Possessions + BoxClose + RowClose;		Output += '<TR><TD COLSPAN="2" ALIGN="CENTER" WIDTH="50%">' + OKButton + RowClose + TableClose;	}	else{		Output = TableOpen + '<TR><TD VALIGN="TOP" ALIGN="CENTER">' + BoxOpen + Output + BoxClose + '</TD></TR>';		Output += '<TR><TD ALIGN="CENTER">' + OKButton + RowClose + TableClose;	}	WriteOutput(Output);}</SCRIPT></HEAD><BODY BACKGROUND="rsr1c.htm" BGCOLOR="#FFFFFF" TEXT="#000000" onLoad="StartUp()"><FONT FACE="Comic Sans MS,Arial"><CENTER><FORM NAME="Navigation"><TABLE BORDER="0" WIDTH="80%" BGCOLOR="#663300" CELLPADDING="5"><TR><TD BGCOLOR="#663300" ALIGN="CENTER"><FONT FACE="Comic Sans MS,Arial"></FONT></TD></TR></TABLE></FORM><H3>[Ein Kapitel neue Rechtschreibung]</H3><FORM NAME="Control"><INPUT TYPE="BUTTON" NAME="Undo" VALUE="Go back" onClick="UndoJump()"><INPUT TYPE="BUTTON" NAME="Restart" VALUE="Restart" onClick="EnterMaze()"></FORM></CENTER></FONT></BODY></HTML> 